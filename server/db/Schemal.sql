DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    first_name VARCHAR(255) NULL,
    last_name VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL,
    avatar VARCHAR(255) NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    remember_token VARCHAR(255) NULL,
    phone VARCHAR(11) NULL,
    address VARCHAR(255) NULL,
    is_active INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    parent_id INTEGER UNSIGNED NULL,
    is_active INTEGER DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id),
    FOREIGN KEY (parent_id) REFERENCES categories(id)
);

DROP TABLE IF EXISTS tags;
CREATE TABLE tags (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    is_active INTEGER DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS topics;
CREATE TABLE topics (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    user_id INTEGER UNSIGNED NOT NULL,
    vote INTEGER DEFAULT 0,
    is_active INTEGER DEFAULT 0,
    publish_at TIMESTAMP DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

DROP TABLE IF EXISTS contents;
CREATE TABLE contents (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    topic_id INTEGER UNSIGNED NOT NULL,
    body TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id),
    FOREIGN KEY (topic_id) REFERENCES topics(id)
);


DROP TABLE IF EXISTS replies;
CREATE TABLE replies (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    user_id INTEGER UNSIGNED NOT NULL,
    topic_id INTEGER UNSIGNED NOT NULL,
    parent_id INTEGER UNSIGNED NULL,
    vote INTEGER DEFAULT 0,
    comment TEXT NOT NULL,
    is_active INTEGER DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (topic_id) REFERENCES topics(id),
    FOREIGN KEY (parent_id) REFERENCES replies(id)
);


DROP TABLE IF EXISTS type_notifications;
CREATE TABLE type_notifications (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id)
);


DROP TABLE IF EXISTS notifications;
CREATE TABLE notifications (
    id INTEGER UNSIGNED AUTO_INCREMENT,
    user_id INTEGER UNSIGNED NOT NULL,
    type_id INTEGER UNSIGNED NOT NULL,
    topic_id INTEGER UNSIGNED NULL,
    comment VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (type_id) REFERENCES type_notifications(id),
    FOREIGN KEY (topic_id) REFERENCES topics(id)
);


DROP TABLE IF EXISTS category_topic;
CREATE TABLE category_topic (
    category_id INTEGER UNSIGNED NOT NULL,
    topic_id INTEGER UNSIGNED NOT NULL,
    PRIMARY KEY (category_id, topic_id),
    FOREIGN KEY (category_id) REFERENCES categories(id),
    FOREIGN KEY (topic_id) REFERENCES topics(id)
);

DROP TABLE IF EXISTS tag_topic;
CREATE TABLE tag_topic (
    tag_id INTEGER UNSIGNED NOT NULL,
    topic_id INTEGER UNSIGNED NOT NULL,
    PRIMARY KEY (tag_id, topic_id),
    FOREIGN KEY (tag_id) REFERENCES tags(id),
    FOREIGN KEY (topic_id) REFERENCES topics(id)
);
